REM  *****  BASIC  *****

Dim styles(0) As String
Dim wordcounts(0) As long

Sub StyleWordCount
	Dim Doc As Object
	Dim Enum As Object
	Dim TextElement As Object

	' Create document object   
	Doc = ThisComponent
	' Create enumeration object 
	Enum = Doc.Text.createEnumeration
	' loop over all text elements
	While Enum.hasMoreElements
		TextElement = Enum.nextElement

		If TextElement.supportsService("com.sun.star.text.TextTable") Then
	    	'MsgBox "The current block contains a table."
			TextElement = Enum.nextElement
		End If

		If TextElement.supportsService("com.sun.star.text.Paragraph") and TextElement.String <> none Then
			countWordsStandard(TextElement)
		End If
	Wend

	' Deal with tables
	Dim TextTables As Object
	Dim Table As Object
	TextTables = Doc.getTextTables()
	For i = 0 To TextTables.getCount() - 1
		Table = TextTables.getByIndex(i)
		countWordsTable(Table)
	Next i
	
	displayResults
End Sub

Sub countWordsTable(Table As Object)
	Dim Rows As Object
	Dim RowIndex As Integer
	Dim Cols As Object
	Dim ColIndex As Integer
	Dim CellName As String
	Dim Cell As Object
	Dim paragraph As String
	Dim style As String
	Dim wordcount As long
	Rows = Table.getRows
	Cols = Table.getColumns
	For RowIndex = 1 To Rows.getCount()
		For ColIndex = 1 To Cols.getCount()
			CellName = Chr(Asc("A") - 1 + ColIndex) & RowIndex
			Cell = Table.getCellByName(CellName)
			' Get rid of leading and trailing spaces and replace 2 spaces with 1
			paragraph = replace(Trim(Cell.String), "  ", " ")
			' Get the style
			style = Cell.createTextCursor().ParaStyleName
			countWords(paragraph, style)
		Next
	Next
End Sub

Sub countWordsStandard(TextElement as Object)
	Dim paragraph As String
	Dim style As String
	Dim wordcount As long
	
	' Get rid of leading and trailing spaces and replace 2 spaces with 1
	paragraph = replace(TextElement.String, "--", " ")
	paragraph = replace(Trim(paragraph), "  ", " ")
	' Get the style
	style = TextElement.ParaStyleName
	' Count the words in paragraph
	countWords(paragraph, style)
End Sub

Sub countWords(paragraph As String, style As String)
	Dim splitArray() As String
	splitArray() = Split(paragraph)
	wordcount = UBound(splitArray()) + 1

	' Check style against array to see if it exists
	if styles(0) = none and wordcounts(0) = none then
		styles(0) = style
		wordcounts(0) = wordcount
	else
		for index = LBound(styles) to UBound(styles)
		   	if styles(index) = style then
		   		'if so, add word count to existing count
		   		wordcounts(index) = wordcounts(index) + wordcount
		   		Exit For
		   	elseif index = UBound(styles) then
		   		ReDim Preserve styles(UBound(styles)+1)
		 		ReDim Preserve wordcounts(UBound(wordcounts)+1)
		  		'if not, add style and word count to array
		  		styles(UBound(styles)) = style
		  		wordcounts(UBound(wordcounts)) = wordcount
			end if
	 	next index
	end if
End Sub

Sub displayResults
	Dim mbText as String
    Dim mbTotal as long
	for i = LBound(styles) to UBound(styles)
		mbText = mbText + styles(i) + " : " + wordcounts(i) + chr(13)
		mbTotal = mbTotal + wordcounts(i)
	next i
	MsgBox mbText + chr(13) + "Total : " + mbTotal
End Sub
